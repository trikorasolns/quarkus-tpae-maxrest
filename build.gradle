import java.util.regex.Matcher

plugins {
  id 'java'
  id 'io.quarkus'
  id 'org.kordamp.gradle.jandex'
  id 'net.researchgate.release'
  id 'maven-publish'
}

group 'com.trikorasolutions.quarkus.tpae.rest'
description 'Trikora Solutions :: Middleware :: IBM Maximo Rest'

defaultTasks 'quarkusBuild', 'check'

// Tasks
def getTimestamp() {
  return new Date().format('yyyyMMddHHmmss')
}

configure(rootProject) {
  file("$rootDir/version.properties").withReader {
    Properties props = new Properties()
    props.load(it)
    project.ext.propVer = props
  }
  version = ext.propVer.get('version')

  if (System.hasProperty('publishUser')) {
    ext.publishUser = System.getProperty('publishUser')
  } else {
    ext.publishUser = ''
  }
  if (System.hasProperty('publishPassword')) {
    ext.publishPassword = System.getProperty('publishPassword')
  } else {
    ext.publishPassword = ''
  }
//
//  if (System.hasProperty('buildVersion')) {
//    version = myVersion + System.getProperty('buildVersion')
//  } else if (System.getenv().containsKey('buildVersion')) {
//    version = myVersion + System.getenv('buildVersion')
//  } else if (project.hasProperty('buildVersion')) {
//    version = myVersion + buildVersion
//  } else {
//    def timestamp = getTimestamp()
//    version = myVersion + 'SNAPSHOT-' + timestamp
//  }
  println "version: ${version}"
}

// Plugins
release {
  failOnCommitNeeded = false
  failOnPublishNeeded = true
  failOnSnapshotDependencies = true
  failOnUnversionedFiles = false
  failOnUpdateNeeded = true
  revertOnFail = true
  preCommitText = ''
  preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
  tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
  newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
  tagTemplate = '${version}'
  versionPropertyFile = 'version.properties'
  versionProperties = ['version']
  snapshotSuffix = '-SNAPSHOT'
  buildTasks = ['build']
  ignoredSnapshotDependencies = []
  versionPatterns = [
    /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
  ]
  pushReleaseVersionBranch = false
  scmAdapters = [
    net.researchgate.release.GitAdapter
  ]

  git {
    requireBranch = 'master'
    pushToRemote = 'origin'
    pushToBranchPrefix = ''
    commitVersionFileOnly = false
    signTag = false
  }
}

publishing {
  publications {
    maven(MavenPublication) {
      artifactId "${project.name}"
      groupId "${group}"
      version "${version}"

      from components.java
      pom {
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        organization {
          name = 'Trikora Solutions'
          url = 'https://github.com/trikorasolns'
        }
        developers {
          developer {
            id = 'jacobdotcosta'
            name = 'A.C.'
//            email = 'github@larsgrefer.de'
//            timezone = 'Europe/Berlin'
          }
        }
        issueManagement {
          system = 'Github'
          url = 'https://github.com/trikorasolns/quarkus-tpae-maxrest/issues'
        }
        scm {
          connection = 'scm:git:https://github.com/trikorasolns/quarkus-tpae-maxrest.git'
          developerConnection = 'scm:git:git@github.com:trikorasolns/quarkus-tpae-maxrest.git'
          url = 'https://github.com/trikorasolns/quarkus-tpae-maxrest'
        }
      }
    }
  }
  repositories {
    maven {
      name = 'GitHub'
      // change URLs to point to your repos, e.g. http://my.org/repo
      def releasesRepoUrl = "https://maven.pkg.github.com/trikorasolns/quarkus-tpae-maxrest"
//      def snapshotsRepoUrl = "$buildDir/repos/snapshots"
//      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      url = releasesRepoUrl
      authentication {
        basic(BasicAuthentication)
        digest(DigestAuthentication)
      }
      credentials(PasswordCredentials)
    }
  }
}


// ### PROJECTS ####
repositories {
  mavenLocal()
  mavenCentral()
}

// ### PLUGINS ####
apply plugin: 'java'
apply plugin: JavaPlugin
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'org.kordamp.gradle.jandex'

compileJava {
  options.fork = true
  options.encoding = 'UTF-8'
  options.compilerArgs << '-parameters'
}

java {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}

test {
  systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}

sourceSets {
  main {
    java {
      srcDirs = ['src/main/java']
    }
    resources {
      srcDir 'src/main/resources'
    }
  }

  test {
    java {
      srcDirs = ['src/test/java']
    }
    resources {
      srcDir 'src/test/resources'
    }
  }
}

// Resources filter.
processResources {
  Properties gradleProps = new Properties()
  gradleProps.load(new FileInputStream(rootDir.toString() + '/gradle.properties'))
  filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: gradleProps)
  filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
    artifactId: project.name
  ])
}

test {
  systemProperties(System.getProperties())
}

dependencies {
  // Quarkus
  implementation enforcedPlatform([group: quarkusPlatformGroupId, name: quarkusPlatformArtifactId, version: quarkusPlatformVersion])
  // Rest
  implementation([group: 'io.quarkus', name: 'quarkus-resteasy-mutiny'])
  implementation([group: 'io.quarkus', name: 'quarkus-rest-client'])
  // Reactive
  implementation([group: 'io.quarkus', name: 'quarkus-vertx'])
  implementation([group: 'io.quarkus', name: 'quarkus-vertx-web'])
  implementation([group: 'io.smallrye.reactive', name: 'smallrye-mutiny-vertx-web-client'])

  testImplementation([group: 'io.quarkus', name: 'quarkus-junit5'])
  testImplementation([group: 'io.rest-assured', name: 'rest-assured', version: '4.0.0', changing: false])
}

// release
afterReleaseBuild.dependsOn publish
